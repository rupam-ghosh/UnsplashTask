package com.colearn.unsplashtask.pojos

import android.os.Parcel
import android.os.Parcelable
import com.google.gson.annotations.Expose
import com.google.gson.annotations.SerializedName

/*
 *  Generated by https://www.jsonschema2pojo.org/
 */
class CurrentUserCollection : Parcelable {
    @SerializedName("id")
    @Expose
    var id: Long = 0

    @SerializedName("title")
    @Expose
    var title: String? = null

    @SerializedName("published_at")
    @Expose
    var publishedAt: String? = null

    @SerializedName("last_collected_at")
    @Expose
    var lastCollectedAt: String? = null

    @SerializedName("updated_at")
    @Expose
    var updatedAt: String? = null

    @SerializedName("cover_photo")
    @Expose
    var coverPhoto: Any? = null

    @SerializedName("user")
    @Expose
    var user: Any? = null

    protected constructor(`in`: Parcel) {
        id = `in`.readValue(Long::class.javaPrimitiveType!!.classLoader) as Long
        title = `in`.readValue(String::class.java.classLoader) as String?
        publishedAt = `in`.readValue(String::class.java.classLoader) as String?
        lastCollectedAt = `in`.readValue(String::class.java.classLoader) as String?
        updatedAt = `in`.readValue(String::class.java.classLoader) as String?
        coverPhoto = `in`.readValue(Any::class.java.classLoader)
        user = `in`.readValue(Any::class.java.classLoader)
    }

    constructor() {}

    override fun writeToParcel(dest: Parcel, flags: Int) {
        dest.writeValue(id)
        dest.writeValue(title)
        dest.writeValue(publishedAt)
        dest.writeValue(lastCollectedAt)
        dest.writeValue(updatedAt)
        dest.writeValue(coverPhoto)
        dest.writeValue(user)
    }

    override fun describeContents(): Int {
        return 0
    }

    companion object {
        val CREATOR: Parcelable.Creator<CurrentUserCollection?> = object : Parcelable.Creator<CurrentUserCollection?> {
            override fun createFromParcel(`in`: Parcel): CurrentUserCollection? {
                return CurrentUserCollection(`in`)
            }

            override fun newArray(size: Int): Array<CurrentUserCollection?> {
                return arrayOfNulls(size)
            }
        }
    }
}