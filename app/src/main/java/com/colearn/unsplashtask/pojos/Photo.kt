package com.colearn.unsplashtask.pojos

import android.os.Parcel
import android.os.Parcelable
import com.colearn.unsplashtask.pojos.CurrentUserCollection
import com.colearn.unsplashtask.pojos.Links
import com.google.gson.annotations.Expose
import com.google.gson.annotations.SerializedName

/*
 *  Generated by https://www.jsonschema2pojo.org/
 */
class Photo : Parcelable {
    @SerializedName("id")
    @Expose
    var id: String? = null

    @SerializedName("created_at")
    @Expose
    var createdAt: String? = null

    @SerializedName("updated_at")
    @Expose
    var updatedAt: String? = null

    @SerializedName("width")
    @Expose
    var width: Long = 0

    @SerializedName("height")
    @Expose
    var height: Long = 0

    @SerializedName("color")
    @Expose
    var color: String? = null

    @SerializedName("blur_hash")
    @Expose
    var blurHash: String? = null

    @SerializedName("likes")
    @Expose
    var likes: Long = 0

    @SerializedName("liked_by_user")
    @Expose
    var isLikedByUser = false

    @SerializedName("description")
    @Expose
    var description: String? = null

    @SerializedName("user")
    @Expose
    var user: User? = null

    @SerializedName("current_user_collections")
    @Expose
    var currentUserCollections: List<CurrentUserCollection?>? = null

    @SerializedName("urls")
    @Expose
    var urls: Urls? = null

    @SerializedName("links")
    @Expose
    var links: Links? = null

    protected constructor(`in`: Parcel) {
        id = `in`.readValue(String::class.java.classLoader) as String?
        createdAt = `in`.readValue(String::class.java.classLoader) as String?
        updatedAt = `in`.readValue(String::class.java.classLoader) as String?
        width = `in`.readValue(Long::class.javaPrimitiveType!!.classLoader) as Long
        height = `in`.readValue(Long::class.javaPrimitiveType!!.classLoader) as Long
        color = `in`.readValue(String::class.java.classLoader) as String?
        blurHash = `in`.readValue(String::class.java.classLoader) as String?
        likes = `in`.readValue(Long::class.javaPrimitiveType!!.classLoader) as Long
        isLikedByUser = `in`.readValue(Boolean::class.javaPrimitiveType!!.classLoader) as Boolean
        description = `in`.readValue(String::class.java.classLoader) as String?
        user = `in`.readValue(User::class.java.classLoader) as User?
        `in`.readList(currentUserCollections, CurrentUserCollection::class.java.classLoader)
        urls = `in`.readValue(Urls::class.java.classLoader) as Urls?
        links = `in`.readValue(Links::class.java.classLoader) as Links?
    }

    constructor() {}

    override fun writeToParcel(dest: Parcel, flags: Int) {
        dest.writeValue(id)
        dest.writeValue(createdAt)
        dest.writeValue(updatedAt)
        dest.writeValue(width)
        dest.writeValue(height)
        dest.writeValue(color)
        dest.writeValue(blurHash)
        dest.writeValue(likes)
        dest.writeValue(isLikedByUser)
        dest.writeValue(description)
        dest.writeValue(user)
        dest.writeList(currentUserCollections)
        dest.writeValue(urls)
        dest.writeValue(links)
    }

    override fun describeContents(): Int {
        return 0
    }

    companion object {
        val CREATOR: Parcelable.Creator<Photo> = object : Parcelable.Creator<Photo> {
            override fun createFromParcel(`in`: Parcel): Photo {
                return Photo(`in`)
            }

            override fun newArray(size: Int): Array<Photo?> {
                return arrayOfNulls(size)
            }
        }
    }
}